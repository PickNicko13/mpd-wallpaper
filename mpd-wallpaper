#!/bin/bash

# disable output if glob not matched
shopt -s nullglob

# init arrays
extensions=( .png .jpg .jpeg .webp .PNG .JPG .JPEG .WEBP )
covernames=({Cover,cover,Cover1,cover1,Front,front}.{png,jpg,jpeg,webp,PNG,JPG,JPEG,WEBP})
previous_cover_file=""

# 0 if cover found and change needed
# 1 if not needed
# 2 if error occured
get_cover(){
	cover_file=""
	# search for well-named covers
	for covername in ${covernames[*]}; do
		if [ -f "$path$covername" ]; then
			cover_file="$path$covername"
			echo $(date '+%H:%M:%S') found artwork in: "$cover_file"
			return 0
		fi
	done
	# if not found, search for any covers as files
	# this part is retarded
	potential_covers=""
	for ext in ${extensions[*]}; do
		potential_covers=( "$path"*"$ext" )
		if (( ${#potential_covers[@]} )); then
			cover_file=${potential_covers[0]}
			echo $(date '+%H:%M:%S') found artwork in: "$cover_file"
			return 0
		fi
	done
	# check if embedded cover exists before proceeding
	if ! ( kid3-cli -c get "$track_file" | grep -q Picture ); then
		echo $(date '+%H:%M:%S') "fix needed: \"$track_file\""
		echo $(date '+%H:%M:%S') "fix needed: \"$track_file\"" >> ~/broken.txt
		return 2
	fi
	echo $(date '+%H:%M:%S') found embedded artwork in: "$track_file"
	kid3-cli -c 'get picture:/tmp/new_embedded_cover.jpg' "$track_file"
	# if ever extracted before, previous cover was embedded and new size is the same
	if [ -f /tmp/embedded_cover.jpg ] && \
			[ "$previous_cover_file" == '/tmp/embedded_cover.jpg' ] && \
			[ $(du -b -s /tmp/embedded_cover.jpg | cut -f1) \
		   	== $(du -b -s /tmp/new_embedded_cover.jpg | cut -f1) ]; then
		echo $(date '+%H:%M:%S') same embedded cover
		rm /tmp/new_embedded_cover.jpg
		return 1
	else
		cover_file="/tmp/embedded_cover.jpg"
		mv /tmp/new_embedded_cover.jpg /tmp/embedded_cover.jpg
		return 0
	fi

	echo $(date '+%H:%M:%S') "shouldn\'t have ever got here on file: \"$track_file\"" >> ~/broken.txt
	return 2
}

set_wallpaper(){
	if get_cover; then
		# comment the line below if you don't want a notification on song change
		dunstify -u low --replace=169 -I "$cover_file" "$(mpc current)"
		# avoid redoing what's already done
		if [ "$previous_cover_file" == "$cover_file" ]; then
			echo $(date '+%H:%M:%S') "same cover art"
			return 1
		fi
		previous_cover_file="$cover_file"
		# transformations for better visuals
		magick  \
			\( "$cover_file" -resize $resolution^ -gravity Center -crop $resolution+0+0 -blur 0x12 -level 0%,180% +repage \) \
			\( "$cover_file" -resize $subresolution -background none -gravity south -extent $resolution \) \
			-layers Flatten -define png:compression-level=0 /tmp/background.png
		# set wallpaper
		feh --no-fehbg --bg-center "/tmp/background.png"
	else
		feh --no-fehbg --bg-center "$1"
	fi
}

# not enough arguments given
if [ -z "$2" ]; then
	echo "	Usage:
	$0 fallback/image bar_height
	e.g.: $0 \$HOME/Pictures/Wallpapers/GiTS/1.png 24"
	exit 1
fi
# file doesn't exist
if ! [ -f "$1" ]; then
	echo couldn\'t open \""$1"\"
	exit 1
fi

resolution=$( xdpyinfo | grep -P -o '[0-9]*x[0-9]* pixels' | cut -f1 -d' ' )
subresolution=${resolution%x*}x$(( ${resolution##*x} - $2 ))
musicpath=$( grep 'music_directory' $HOME/.mpd/mpd.conf | cut -f2 -d' ' | sed "s+\"++g; s+~+$HOME+" )
echo -e "resolution: $resolution\nsubresolution: $subresolution"

while true; do
	newtrack=$(mpc -f '%file%' current)
	if ! [ "$newtrack" == "$track" ]; then
		echo $(date '+%H:%M:%S') track changed to $newtrack

		track="$newtrack"
		track_file="$musicpath/$track"
		path="${track_file%/*}/"

		starttime=$(date +'%s.%N')
		set_wallpaper
		echo took $(echo "scale=9;$(date +'%s.%N')-$starttime" | bc)s
	# else
	#	echo $(date '+%H:%M:%S') track not changed
	fi
	mpc idle > /dev/null
done
