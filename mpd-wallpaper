#!/bin/bash

# disable output if glob not matched
shopt -s nullglob

# init arrays
extensions=( .png .jpg .jpeg .webp .PNG .JPG .JPEG .WEBP )
covernames=({Cover,cover,Cover1,cover1,Front,front}.{png,jpg,jpeg,webp,PNG,JPG,JPEG,WEBP})
border=0
border_color="#ffffff"
bottom_indent=0
top_indent=0
fallback_image=0
blur_resolution="300x300"
notify=false
dither=0
downscaling=0

if [[ $XDG_SESSION_TYPE == "x11" ]]; then
	resolution=$( xrandr | grep 'connected primary' | cut -f4 -d' ' | grep -oe '^[^+]*' )
else
	resolution=$( wlr-randr | grep 'current' | head -n1 | cut -f5 -d' ' )
fi
width=${resolution%x*}
height=${resolution#*x}
musicpath=$( grep 'music_directory' $HOME/.mpd/mpd.conf | cut -f2 -d' ' | sed "s+\"++g ; s+~+$HOME+" )

usage(){
echo "Usage:  $0 -f fallback_image [-h] [-n] [-b bottom_indent] [-B border] [-d ditherlevel] [-D downscale] [-m args] [p path] [-r HxV] [-t top_indent]"
echo "	-f: image to use if cover was not found"
echo "	-b: indent bottom_indent pixels to accomodate for the bottom bar. Default: 0"
echo "	-B: add the specified amount of pixels around the cover to separate it. Default: 0"
echo "	-d: enable dithering and set level (recommended 4-24, min 2)"
echo "	-D: enable downscaling and set level (recommended 2-3, min 2)"
echo "	-h: show this help message"
echo "	-n: enable dunst notifications (requires dunstify)"
echo "	-m: add custom mpc arguments (useful if you have to specify your mpd address or password"
echo "	-p: set path to save blurred image to (e.g. when you want to use it on lockscreen)"
echo "	-r: blur resolution (ImageMagick geometry). Default: 300x300"
echo "	-t: indent top_indent pixels to accomodate for the bar. Default: 0"
}

while getopts ":hnb:B:d:D:f:m:p:r:t:" arg; do
	case $arg in
		b) # bottom bar size
			bottom_indent=${OPTARG}
		;;
		B) # border size
			border=${OPTARG}
		;;
		d) # dither level
			dither=${OPTARG}
		;;
		D) # downscaling level
			downscaling=${OPTARG}
		;;
		f) # fallback image
			fallback_image=${OPTARG}
			# file doesn't exist
			if ! [ -f "$fallback_image" ]; then
				echo couldn\'t open \""$fallback_image"\"
				exit 1
			fi
		;;
		m) # mpc args
			mpc_args="${OPTARG}"
		;;
		p) # blurred image path
			blurred_path="${OPTARG}"
		;;
		n) # enable notifications
			notify=true
		;;
		r) # blur resolution
			blur_resolution=${OPTARG}
		;;
		t) # top bar size
			top_indent=${OPTARG}
		;;
		h | *) # Display help.
			usage
			exit 0
		;;
	esac
done

if [ "$fallback_image" == 0 ]; then
	usage
	exit 1
fi

if [ "$downscaling" -ge 2 ]; then
	additional_processing="$additional_processing -filter Point -resize ${downscaling}00%"

	real_resolution=$resolution
	echo $real_resolution

	width=$(($width/$downscaling))
	height=$(($height/$downscaling))
	resolution=${width}x${height}

	bottom_indent=$(($bottom_indent/$downscaling))
	top_indent=$(($top_indent/$downscaling))
	border=$(($border/$downscaling))
fi

same_cover(){
	# cover path is the same
	if [ "$previous_cover_file" == "$cover_file" ]; then
		# separate file
		if [ "$cover_file" != '/tmp/embedded_cover.jpg' ]; then
			return 0;
		# ever extracted before, previous cover was embedded and new size is the same
		elif [ -f /tmp/embedded_cover.jpg ] && \
				[ "$previous_cover_file" == '/tmp/embedded_cover.jpg' ] && \
				[ $(du -b -s /tmp/embedded_cover.jpg | cut -f1) \
			   	== $(du -b -s /tmp/new_embedded_cover.jpg | cut -f1) ]; then
			return 0
		fi
	fi
	return 1
}

get_cover(){
	cover_file=""
	# search for well-named covers
	for covername in ${covernames[*]}; do
		if [ -f "$path$covername" ]; then
			cover_file="$path$covername"
			echo $(date '+%H:%M:%S') found artwork in: "$cover_file"
			return 0
		fi
	done
	# if not found, search for any covers as files
	# this part is retarded
	potential_covers=""
	for ext in ${extensions[*]}; do
		potential_covers=( "$path"*"$ext" )
		if (( ${#potential_covers[@]} )); then
			cover_file=${potential_covers[0]}
			echo $(date '+%H:%M:%S') found artwork in: "$cover_file"
			return 0
		fi
	done
	# embedded cover exists
	if ( kid3-cli -c get "$track_file" | grep -q Picture ); then
		echo $(date '+%H:%M:%S') found embedded artwork in: "$track_file"
		kid3-cli -c 'get picture:/tmp/new_embedded_cover.jpg' "$track_file"
		cover_file="/tmp/embedded_cover.jpg"
		return 0
	fi

	echo $(date '+%H:%M:%S') "fix needed: \"$track_file\""
	echo $(date '+%H:%M:%S') "fix needed: \"$track_file\"" >> ~/broken.txt
	return 1
}

set_wallpaper(){
		# if desired, save blurred image
		if test $blurred_path; then
			magick -colorspace sRGB \
			"$cover_file" -filter Triangle +repage -colorspace sRGB -resize $blur_resolution +repage -gravity center -crop $width:$height^ +repage -blur 0x2 -function Polynomial '0.4,0' -gravity Center -resize $real_resolution^ -crop $real_resolution+0+0 +repage \
			-quality 30 -define webp:lossless=true $blurred_path &
		fi

		# transformations for better visuals
		if [ $border != 0 ]; then
			# these parameters were chosen by trial and error, but may not work for you
			# feel free to play with image size and color count
			border_color=$(magick "$cover_file" -scale 200x200! +dither -colors 50 -format "%c" histogram:info: | sort -n | head -n 1 | awk '{print $3}')
		fi
		if test $dither -ge 2; then
			magick -colorspace sRGB \
			\( "$cover_file" -filter Triangle +repage -colorspace sRGB -resize $blur_resolution +repage -gravity center -crop $width:$height^ +repage -blur 0x2 -function Polynomial '0.5,0' -gravity Center -resize $resolution^ -crop $resolution+0+0 +repage \) \
			\( "$cover_file" -filter Hermite +repage -colorspace sRGB -resize $(($width-2*$border))x$(($height-$top_indent-$bottom_indent-2*$border)) -bordercolor "$border_color" -border $border -background none -gravity south -extent $resolution-0-$bottom_indent \) \
			-ordered-dither o8x8,$dither \
			-layers Flatten $additional_processing -quality 0 /tmp/background.png
		else
			magick -colorspace sRGB \
			\( "$cover_file" -filter Triangle +repage -colorspace sRGB -resize $blur_resolution +repage -gravity center -crop $width:$height^ +repage -blur 0x2 -function Polynomial '0.5,0' -gravity Center -resize $resolution^ -crop $resolution+0+0 +repage \) \
			\( "$cover_file" -filter Hermite +repage -colorspace sRGB -resize $(($width-2*$border))x$(($height-$top_indent-$bottom_indent-2*$border)) -bordercolor "$border_color" -border $border -background none -gravity south -extent $resolution-0-$bottom_indent \) \
			-layers Flatten $additional_processing -quality 0 /tmp/background.png
		fi

		# set wallpaper
		if [[ $XDG_SESSION_TYPE == "x11" ]]; then
			feh --no-fehbg --bg-center "/tmp/background.png"
		else
			swww img "/tmp/background.png"
		fi
}

while true; do
	newtrack=$(mpc $mpc_args -f '%file%' current)
	if [[ "$newtrack" == "" ]]; then
		printf "currently playing: silence\n"
	elif [[ "$newtrack" != "$track" ]]; then
		echo $(date '+%H:%M:%S') track changed to $newtrack

		track="$newtrack"
		track_file="$musicpath/$track"
		path="${track_file%/*}/"

		starttime=$(date +'%s.%N')
		if get_cover; then
			if same_cover; then
				echo $(date '+%H:%M:%S') "same cover art"
				if $notify; then
					dunstify -u low --replace=169 -I "$cover_file" "$(mpc $mpc_args current)"
				fi
			else
				if [ "$cover_file" == '/tmp/embedded_cover.jpg' ]; then
					mv /tmp/new_embedded_cover.jpg /tmp/embedded_cover.jpg
				fi
				if $notify; then
					dunstify -u low --replace=169 -I "$cover_file" "$(mpc $mpc_args current)"
				fi
				set_wallpaper
			fi
		else
			if $notify; then
				dunstify -u critical --replace=169 "TRACK ADDED TO THE broken.txt"
			fi

			if [[ $XDG_SESSION_TYPE == "x11" ]]; then
				feh --no-fehbg --bg-center "/tmp/background.png"
			else
				swww img "/tmp/background.png"
			fi
		fi
		previous_cover_file="$cover_file"
		echo took $(echo "scale=6;$(date +'%s.%N')-$starttime" | bc)s
	fi
	mpc $mpc_args idle > /dev/null
done
